@page "/staff"
@inject HttpClient Http
@using HKCRSystem.Blazor.Data
@using HKCRSystem.Blazor.Data.DTO;
@using HKCRSystem.Blazor.Data.Services
@inject UserManagementService UserManagementService
@inject StaffService StaffService
@inject ISnackbar Snackbar
@inject Authorize Authorize
@inject NavigationManager NavManager

<PageTitle>staff</PageTitle>

<MudContainer Class="mt-4 position-relative">
    @if (userRole == "Admin")
    {
        <div class="d-flex justify-content-end mb-2">
            <MudButton OnClick="OpenDialogAdd" Variant="Variant.Filled" Color="Color.Primary">
                Add Staff
            </MudButton>
        </div>
    }
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@staffsDatas" Hover="true" Striped="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Staff</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<StaffData, object>(StaffData => StaffData.FirstName)">First Name</MudTableSortLabel></MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Address</MudTh>
            <MudTh>PhoneNo</MudTh>
            <MudTh>Role</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="PhoneNo">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Role">@context.Role</MudTd>
            @if (userRole == "Admin")
            {
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick=@(()=>OpenDialogEdit(context)) aria-label="Edit"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" aria-label="delete" OnClick=@(()=>DeleteStaff(context.Id)) />
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="visibleAdd" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" /> Add Staff
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value="firstName" Label="First Name" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="lastName" Label="Last Name" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="email" Label="Email" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="address" Label="Address" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="phone" Label="Phone Number" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" @bind-Value="role" Label="Role" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="string" Value="@("Admin")" />
                    <MudSelectItem T="string" Value="@("Staff")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="password" Label="Password" InputType="InputType.Password" Variant="Variant.Outlined"></MudTextField>
            </MudItem>

        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="SubmitAdd">Save</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CloseAdd">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="visibleEdit" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" /> Edit Staff
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_staffData.FirstName Label="First Name" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_staffData.LastName Label="Last Name" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value=@_staffData.Email Label="Email" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value=@_staffData.Address Label="Address" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_staffData.PhoneNumber Label="Phone Number" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" @bind-Value=@_staffData.Role Label="Role" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="string" Value="@("Admin")" />
                    <MudSelectItem T="string" Value="@("Staff")" />
                </MudSelect>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="SubmitEdit">Save</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CloseEdit">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<StaffData>? staffsDatas;
    private string firstName;
    private string lastName;
    private string email;
    private string address;
    private string phone;
    private string password;
    private string role;

    private string userRole;
    protected override async Task OnInitializedAsync()
    {
        string token = await Authorize.GetToken();
        userRole = await Authorize.GetRole();
        staffsDatas = await StaffService.GetStaffAsync(token);
    }

    private bool visibleAdd;
    private bool visibleEdit;

    private StaffData _staffData { get; set; }

    private void OpenDialogAdd() => visibleAdd = true;

    private void OpenDialogEdit(StaffData staffdata)
    {
        _staffData = staffdata;
        visibleEdit = true;
    }

    void CloseAdd() => visibleAdd = false;
    void CloseEdit() => visibleEdit = false;

    public async void SubmitAdd()
    {
        visibleAdd = false;
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await UserManagementService.AddStaff(firstName, lastName, email, phone, address, role, password, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    public async void SubmitEdit()
    {
        visibleEdit = false;
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await UserManagementService.UpdateStaff(_staffData.Id, _staffData.FirstName, _staffData.LastName, _staffData.Email, _staffData.PhoneNumber, _staffData.Address, _staffData.Role, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    public async void DeleteStaff(string id)
    {
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await UserManagementService.DeleteStaff(id, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    private DialogOptions dialogOptions = new() { FullWidth = true };
}