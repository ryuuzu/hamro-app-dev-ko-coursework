@page "/offers"
@inject HttpClient Http
@using HKCRSystem.Blazor.Data
@using HKCRSystem.Blazor.Data.DTO;
@using HKCRSystem.Blazor.Data.Services
@inject OfferService OfferService
@inject ISnackbar Snackbar
@inject Authorize Authorize
@inject NavigationManager NavManager

<PageTitle>offers</PageTitle>

<MudContainer Class="mt-4 position-relative">
    <div class="d-flex justify-content-end mb-2">
        <MudButton OnClick="OpenDialogAdd" Variant="Variant.Filled" Color="Color.Primary">
            Add Offer
        </MudButton>
    </div>
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@offersDatas" Hover="true" Striped="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Offer</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<OfferData, object>(OfferData => OfferData.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh>Message</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Discount(%)</MudTh>
            <MudTh>Start Date</MudTh>
            <MudTh>End Date</MudTh>
            <MudTh>Created By</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Message">@context.Message</MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Discount(%)">@context.DiscountPercent</MudTd>
            <MudTd DataLabel="Start Date">@context.StartDate</MudTd>
            <MudTd DataLabel="End Date">@context.EndDate</MudTd>
            <MudTd DataLabel="Created By">@context.CreatedBy</MudTd>

            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick=@(()=>OpenDialogEdit(context)) aria-label="Edit"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" aria-label="delete" OnClick=@(()=>DeleteOffer(context.Id.ToString())) />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="visibleAdd" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" /> Add Offer
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="name" Label="Name" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="offerType" Label="Type" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="discount" Label="Discount" Variant="Variant.Outlined" InputType="InputType.Number"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker @bind-Date="startDate" Label="Start Date" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker @bind-Date="endDate" Label="End Date" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="offerMessage" Label="Message" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="SubmitAdd">Save</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CloseAdd">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="visibleEdit" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" /> Edit Offer
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value=@_offerData.Name Label="Name" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
            <MudTextField @bind-Value=@_offerData.Type Label="Type" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_offerData.DiscountPercent Label="Discount" Variant="Variant.Outlined" InputType="InputType.Number"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_offerData.StartDate Label="StartDate" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_offerData.EndDate Label="EndData" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value=@_offerData.Message Label="Message" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="SubmitEdit">Save</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CloseEdit">Close</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private List<OfferData>? offersDatas;
    private string name;
    private string offerMessage;
    private string offerType;
    private float discount;
    public DateTime? startDate { get; set; }
    public DateTime? endDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string token = await Authorize.GetToken();
        offersDatas = await OfferService.GetOfferAsync(token);
    }
    private bool visibleAdd;
    private bool visibleEdit;

    private OfferData _offerData { get; set; }

    private void OpenDialogAdd() => visibleAdd = true;

    private void OpenDialogEdit(OfferData offerdata)
    {
        _offerData = offerdata;
        visibleEdit = true;
    }

    void CloseAdd() => visibleAdd = false;
    void CloseEdit() => visibleEdit = false;

    public string TextValue { get; set; }

    public async void SubmitAdd()
    {
        string message;
        Severity type;
        if (startDate > endDate || startDate < DateTime.Today || startDate == null || endDate == null)
        {
            message = "Choose Valid Date";
            type = Severity.Error;
        }
        visibleAdd = false;
        string token = await Authorize.GetToken();
        var result = await OfferService.AddOffer(name, offerMessage, startDate, endDate, offerType, discount, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    public async void SubmitEdit()
    {
        string message;
        Severity type;
        if (startDate > endDate || startDate < DateTime.Today || startDate == null || endDate == null)
        {
            message = "Choose Valid Date";
            type = Severity.Error;
        }
        visibleEdit = false;
        string token = await Authorize.GetToken();
        var result = await OfferService.UpdateOffer(_offerData.Id, _offerData.Name, _offerData.Message, _offerData.StartDate, _offerData.EndDate, _offerData.Type, _offerData.DiscountPercent, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    public async void DeleteOffer(string id)
    {
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await OfferService.DeleteOffer(id, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    private DialogOptions dialogOptions = new() { FullWidth = true };
}