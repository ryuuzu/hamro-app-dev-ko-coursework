@page "/Car"
@using HKCRSystem.Blazor.Data
@using HKCRSystem.Blazor.Data.DTO;
@using HKCRSystem.Blazor.Data.Services
@inject CarService CarService
@inject Authorize Authorize
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<PageTitle>Car</PageTitle>

<MudContainer Class="mt-4 position-relative">
    <div class="d-flex justify-content-end mb-2">
        <MudButton OnClick="OpenDialogAdd" Variant="Variant.Filled" Color="Color.Primary">
            Add Car
        </MudButton>
    </div>
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@carsDatas" Hover="true" Striped="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Car List</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<CarData, object>(CarData => CarData.Company)">Company</MudTableSortLabel></MudTh>
            <MudTh>Model</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>IsAvailable</MudTh>
            <MudTh>CreatedBy</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Company">@context.Company</MudTd>
            <MudTd DataLabel="Model">@context.Model</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd DataLabel="IsAvailable">@context.IsAvailable</MudTd>
            <MudTd DataLabel="CreatedBy">@context.CreatedBy</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick=@(()=>OpenDialogEdit(context)) aria-label="Edit"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" aria-label="delete" OnClick=@(()=>DeleteCar(context.Id.ToString())) />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="visibleAdd" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" /> Add Car
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="Company" Label="Company" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="Model" Label="Model" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="Price" Label="Price" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" @bind-Value="Status" Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="string" Value="@("New")" />
                    <MudSelectItem T="string" Value="@("Old")" />
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="SubmitAdd">Save</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CloseAdd">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="visibleEdit" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" /> Edit Car
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_carData.Company Label="Company" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_carData.Model Label="Model" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value=@_carData.Price Label="Price" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="string" @bind-Value=@_carData.Status Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="string" Value="@("New")" />
                    <MudSelectItem T="string" Value="@("Old")" />
                </MudSelect>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="SubmitEdit">Save</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CloseEdit">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<CarData>? carsDatas;
    private string Model;
    private string Company;
    private double Price;
    private string Status;

    protected override async Task OnInitializedAsync()
    {
        carsDatas = await CarService.GetCarAsync();
    }

    private bool visibleAdd;
    private bool visibleEdit;
 
    private CarData _carData { get; set; }

    private void OpenDialogAdd() => visibleAdd = true;

    private void OpenDialogEdit(CarData cardata)
    {
        _carData = cardata;
        visibleEdit = true;
    }

    void CloseAdd() => visibleAdd = false;
    void CloseEdit() => visibleEdit = false;

    public string TextValue { get; set; }

    public async void SubmitAdd()
    {
        visibleAdd = false;
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await CarService.CreateCar(Company, Model, Price, Status, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    public async void SubmitEdit()
    {
        visibleEdit = false;
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await CarService.UpdateCar(_carData.Id, _carData.Company, _carData.Model, _carData.Price, _carData.Status, _carData.IsAvailable, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    public async void DeleteCar(string id)
    {
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await CarService.DeleteCar(id, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    private DialogOptions dialogOptions = new() { FullWidth = true };

    private async Task SubmitForm()
    {
        // Submit form logic goes here
    }
}