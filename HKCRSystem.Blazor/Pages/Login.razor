@page "/login"

<PageTitle>Login</PageTitle>

@inherits LayoutComponentBase
@inject NavigationManager NavManager
@using System.ComponentModel.DataAnnotations
@using HKCRSystem.Blazor.Data.Services
@inject LoginService LoginService
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ISnackbar Snackbar
@inject Authorize Authorize

<PageTitle>Login</PageTitle>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="container mt-5">
        <!-- Outer Row -->
        <div class="row justify-content-center">

            <div class="col-xl-10 col-lg-12 col-md-9">

                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <!-- Nested Row within Card Body -->
                        <div class="row">
                            <div class="col-lg-6 d-none d-lg-block bg-login">
                                <img src="./login.png" class="my-3 p-4 img-fluid " style="height: 100%; width: 800px;" />
                            </div>
                            <div class="col-lg-6">
                                <div class="p-3">
                                    <div class="text-center">
                                        <h1 class="h4 text-gray-900 mb-4">Welcome Back!</h1>
                                    </div>
                                    <MudMainContent>
                                        <MudContainer MaxWidth="MaxWidth.Medium">

                                            <MudGrid Class="d-flex justify-center">
                                                <MudItem xs="12" sm="10">
                                                    <MudCard>
                                                        <MudCardContent>
                                                            <h3>Login</h3>
                                                            <MudTextField Label="Email" Class="mt-3" HelperText="example@gmail.com" Variant="Variant.Outlined"
                                                                          @bind-Value="model.Email" For="@(() => model.Email)" />
                                                            <MudTextField Label="Enter Password" HelperText="Enter password" Class="mt-3" Variant="Variant.Outlined"
                                                                          @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                                                        </MudCardContent>
                                                        <MudCardActions>
                                                            <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="mt-4 mx-auto btn btn-primary" ButtonType="ButtonType.Submit">Submit</MudButton>
                                                        </MudCardActions>
                                                    </MudCard>

                                                </MudItem>
                                            </MudGrid>
                                        </MudContainer>
                                    </MudMainContent>
                                    <hr>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>

    </div>
</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    private bool userExists = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserExistence();
        if (userExists)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task CheckUserExistence()
    {
        int accessToken = await Authorize.CheckToken();
        if (accessToken == 1)
        {
            userExists = true;
        }
    }

    public class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }
    }

    private async void OnValidSubmit()
    {
        var result = await LoginService.UserLogin(model.Email, model.Password);
        if (result.Status == "Success")
        {
            var message = result.Message.Split(",");
            await localStore.SetItemAsync("access", message[0]);
            await localStore.SetItemAsync("user", Authorize.Encoder(message[1]));
            await localStore.SetItemAsync("role", Authorize.Encoder(message[2]));
            if(message[2] == "Customer")
            {
                NavManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                NavManager.NavigateTo("/home", forceLoad: true);
            }
        }
        else
        {
            Snackbar.Add("Incorrect Username/Password!", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
        }
    }
}

