@page "/request"
@inject HttpClient Http
@using HKCRSystem.Blazor.Data
@using HKCRSystem.Blazor.Data.DTO;
@using HKCRSystem.Blazor.Data.Services
@inject RequestService RequestService
@inject ReturnService ReturnService
@inject Authorize Authorize
@inject ISnackbar Snackbar

<PageTitle>Request</PageTitle>


<MudContainer Class="mt-4 position-relative">
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@requestsDatas" Hover="true" Striped="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Request</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<RequestData, object>(RequestData => RequestData.RequestedCar)">Requested Car</MudTableSortLabel></MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Discount</MudTh>
            <MudTh>Start Date</MudTh>
            <MudTh>End Date</MudTh>
            <MudTh>Requested By</MudTh>
            <MudTh>Approved By</MudTh>
            <MudTh>Is Cancelled</MudTh>
            <MudTh>Is Denied</MudTh>
            <MudTh>Billing Id</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="RequestedCar">@context.RequestedCar</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Discount">@context.Discount</MudTd>
            <MudTd DataLabel="StartDate">@context.StartDate.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="EndDate">@context.EndDate.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="RequestedBy">@context.RequestedBy</MudTd>

            <MudTd DataLabel="ApprovedBy">
                @if (context.IsApproved)
                {
                    @context.ApprovedBy
                }
                else
                {
                    <MudText>N/A</MudText>
                }
            </MudTd>
            <MudTd DataLabel="IsCancelled">@context.IsCancelled</MudTd>
            <MudTd DataLabel="IsCancelled">@(context.ApprovedById != context.RequestedById && !context.IsApproved ? "True": "False")</MudTd>
            <MudTd DataLabel="BillingId">@context.BillingId</MudTd>
            <MudTd DataLabel="Actions">
                @if (!context.IsApproved && !context.IsCancelled)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Check" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick=@(()=>OpenAcceptDialog(context)) aria-label="Edit" />
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick=@(()=>OpenDenyDialog(context)) aria-label="delete" />
                }
                @if (context.IsApproved)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.AssignmentReturn" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick=@(()=>OpenReturnDialog(context)) aria-label="Edit" />
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>


<MudDialog @bind-IsVisible="visibleAccept" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Are you sure you want to accept request by @activeRequestData.RequestedBy ?
        </MudText>
    </TitleContent>
    <DialogContent>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="handleAcceptRequest">Yes</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="@(() => CloseAcceptDialog())">No</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="visibleDeny" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Are you sure you want to deny request by @activeRequestData.RequestedBy ?
        </MudText>
    </TitleContent>
    <DialogContent>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="handleDenyRequest">Yes</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="@(() => CloseDenyDialog())">No</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="visibleReturn" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Are you sure you want to mark request returned by @activeRequestData.RequestedBy ?
        </MudText>
    </TitleContent>
    <DialogContent>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="handleReturnDialog">Yes</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="@(() => CloseReturnDialog())">No</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private List<RequestData>? requestsDatas;
    //private bool FilterHandler(InventoryItem item) => SearchFilter(item, toSearch);
    protected override async Task OnInitializedAsync()
    {
        string token = await Authorize.GetToken();
        requestsDatas = await RequestService.GetRequestAsync(token);
    }

    private bool visibleAdd;
    private bool visibleEdit;

    private RequestData activeRequestData;

    private bool visibleAccept;
    private bool visibleDeny;
    private bool visibleReturn;

    private RequestData _requestData { get; set; }

    private void OpenAcceptDialog(RequestData requestData)
    {
        activeRequestData = requestData;
        visibleAccept = true;
    }

    private void CloseAcceptDialog()
    {
        activeRequestData = null;
        visibleAccept = false;

    }

    private void OpenReturnDialog(RequestData requestData)
    {
        activeRequestData = requestData;
        visibleReturn = true;
    }

    private void CloseReturnDialog()
    {
        activeRequestData = null;
        visibleReturn = false;

    }

    private async void handleAcceptRequest()
    {
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await RequestService.AcceptRequest(token, activeRequestData.Id);
        message = result.Message;

        if (result.Status == "Success")
        {
            type = Severity.Success;
        }
        else
        {
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
        requestsDatas = await RequestService.GetRequestAsync(token);
        StateHasChanged();
        visibleAccept = false;
    }

    private async void handleReturnDialog()
    {
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await ReturnService.CreateRetun(activeRequestData.Id, token);
        message = result.Message;

        if (result.Status == "Success")
        {
            type = Severity.Success;
        }
        else
        {
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
        requestsDatas = await RequestService.GetRequestAsync(token);
        StateHasChanged();
        visibleAccept = false;
    }

    private void OpenDenyDialog(RequestData requestData)
    {
        activeRequestData = requestData;
        visibleDeny = true;
    }
    private void CloseDenyDialog()
    {
        activeRequestData = null;
        visibleDeny = false;

    }
    private async void handleDenyRequest()
    {
        string message;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await RequestService.DenyRequest(token, activeRequestData.Id);
        message = result.Message;

        if (result.Status == "Success")
        {
            type = Severity.Success;
        }
        else
        {
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
        requestsDatas = await RequestService.GetRequestAsync(token);
        StateHasChanged();
        visibleAccept = false;
    }


    void CloseEdit() => visibleEdit = false;

    void SubmitAdd() => visibleAdd = false;
    void SubmitEdit() => visibleEdit = false;

    public string TextValue { get; set; }


    private DialogOptions dialogOptions = new() { FullWidth = true };
    private async Task SubmitForm()
    {
        // Submit form logic goes here
    }
}

