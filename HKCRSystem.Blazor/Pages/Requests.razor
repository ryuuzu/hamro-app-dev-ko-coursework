@page "/customerrequest"
@inject HttpClient Http
@using HKCRSystem.Blazor.Data
@using HKCRSystem.Blazor.Data.DTO;
@using HKCRSystem.Blazor.Data.Services
@using Newtonsoft.Json
@inject RequestCustomerService RequestCustomerService
@inject CarRequestService CarRequestService
@inject ISnackbar Snackbar
@inject Authorize Authorize
@inject NavigationManager NavManager
@inject PaymentService Payment

<PageTitle>Request</PageTitle>

<MudContainer Class="mt-4 position-relative">
    <div class="d-flex justify-content-end mb-2">
    </div>
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@requestsDatas" Hover="true" Striped="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Your Car Rent Requests</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<RequestDTO, object>(RequestDTO => RequestDTO.RequestedCar)">Requested Car</MudTableSortLabel></MudTh>
            <MudTh>Start Date</MudTh>
            <MudTh>End Date</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Discount</MudTh>
            <MudTh>Cancelled</MudTh>
            <MudTh>Approved By </MudTh>
            <MudTh>Billing Id</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Requested Car">@context.RequestedCar</MudTd>
            <MudTd DataLabel="Start Date">@context.StartDate.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="End Date">@context.EndDate.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="Discount">@context.Discount</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Status">@(context.IsCancelled ? "Cancelled" : context.IsApproved ? "Approved" : !context.IsApproved || context.ApprovedById == token ? "Pending" : "Denied")</MudTd>
            <MudTd DataLabel="Approved By">
                @(context.IsApproved ? context.ApprovedBy : "-")
                </MudTd>
            <MudTd DataLabel="Billing Id">@context.BillingId</MudTd>
            <MudTd DataLabel="Actions">
                @if (!context.IsCancelled)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" aria-label="delete" OnClick="() => CancelRequest(context.Id)"/>
                }
                @if (context.IsApproved)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Payment" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" aria-label="delete" OnClick="() => MakePayment(context.BillingId)" />
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private string token;
    private bool visibleAdd;
    private bool visibleEdit;

    private string message;
    private Severity type;
    private List<RequestDTO>? requestsDatas = new List<RequestDTO>();
    private RequestDTO _carRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        token = await Authorize.GetToken();
        if(token == null)
        {
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        requestsDatas = await RequestCustomerService.GetRequestCustomerAsync(token);
    }

    private void OpenDialogEdit(RequestDTO carrequest)
    {
        _carRequest = carrequest;
        visibleEdit = true;
    }

    private async void CancelRequest(Guid id)
    {
        token = await Authorize.GetToken();
        var result = await CarRequestService.CancelRequest(id, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

    private async void MakePayment(Guid id)
    {
        token = await Authorize.GetToken();
        var result = await Payment.CreatePayment(id, token);
        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            //Deserialize the JSON response
            var responseObject = JsonConvert.DeserializeObject<dynamic>(result.Message);
            //Access the payment_url property
            string paymentUrl = responseObject.payment_url;
            NavManager.NavigateTo(paymentUrl);

        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }
  }