@page "/damage"
@using HKCRSystem.Blazor.Data
@using HKCRSystem.Blazor.Data.DTO;
@using HKCRSystem.Blazor.Data.Services
@inject DamageService DamageService
@inject ISnackbar Snackbar
@inject Authorize Authorize
@inject NavigationManager NavManager

<PageTitle>damage</PageTitle>


<MudContainer Class="mt-8 position-relative">
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@damagesDatas" Hover="true" Striped="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Damage</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<DamageData, object>(DamageData => DamageData.Description)">Description</MudTableSortLabel></MudTh>
            <MudTh>Damage Date</MudTh>
            <MudTh>Requested By</MudTh>
            <MudTh>Reported Date</MudTh>
            <MudTh>Damaged Car</MudTh>
            <MudTh>Reviewed By</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="DamageDate">@context.DamageDate</MudTd>
            <MudTd DataLabel="RequestedBy">@context.RequestedBy</MudTd>
            <MudTd DataLabel="ReportedDate">@context.ReportedDate</MudTd>
            <MudTd DataLabel="DamagedCar">@context.DamagedCar</MudTd>
            <MudTd DataLabel="ReviewedBy">@context.ReviewedBy</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.EditNote" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick=@(()=>OpenDialogEdit(context)) aria-label="Edit"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="visibleEdit" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" /> Update Damage Price
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Style="justify-content:center!important">
            <MudItem xs="6">
                <MudTextField @bind-Value=@_damageData.Price Label="Price" Variant="Variant.Outlined" InputType="InputType.Number"></MudTextField>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="UpdateDamage">Save</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" OnClick="CloseEdit">Close</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private List<DamageData>? damagesDatas;

    protected override async Task OnInitializedAsync()
    {
        string token = await Authorize.GetToken();
        damagesDatas = await DamageService.GetDamageAsync(token);
    }

    private bool visibleEdit;
    private DamageData _damageData { get; set; }

    private void OpenDialogEdit(DamageData damagedata)
    {
        _damageData = damagedata;
        visibleEdit = true;
    }

    public async void UpdateDamage()
    {
        string message;
        visibleEdit = false;
        Severity type;
        string token = await Authorize.GetToken();
        var result = await DamageService.UpdateDamage(_damageData.Id.ToString(), _damageData.Price, token);

        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }
        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }
    void CloseEdit() => visibleEdit = false;

    private DialogOptions dialogOptions = new() { FullWidth = true };
    private async Task SubmitForm()
    {
        // Submit form logic goes here
    }
}