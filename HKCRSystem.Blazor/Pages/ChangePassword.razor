@page "/changepassword"
@inherits LayoutComponentBase

@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavManager
@using HKCRSystem.Blazor.Data.Services
@inject PasswordService PasswordService
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject ISnackbar Snackbar
@inject Authorize Authorize

<PageTitle>changepassword</PageTitle>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <h6>Change Password</h6>
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>

                            <MudTextField Label="Current Password" HelperText="current password" Class="mt-3"
                                          @bind-Value="model.CurrentPassword" For="@(() => model.CurrentPassword)" InputType="InputType.Password" />
                            <MudTextField Label="New Password" HelperText="Choose a strong password" Class="mt-3"
                                          @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                            <MudTextField Label="Confirm Password" HelperText="Repeat the password" Class="mt-3"
                                          @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Change Password</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudMainContent>

</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        public string CurrentPassword { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }
    }

    private async void OnValidSubmit(EditContext context)
    {
        string message;
        Severity type;
        string token = await Authorize.GetToken();

        var result = await PasswordService.ChangePassword(model.CurrentPassword, model.Password, token);
        if (result == null)
        {
            await Authorize.Logout();
            message = "Session Expired. Please Login.";
            type = Severity.Warning;
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else if (result.Status == "Success")
        {
            message = result.Message;
            type = Severity.Success;
        }
        else
        {
            message = result.Message;
            type = Severity.Warning;
        }

        Snackbar.Add(message, type, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
    }

}